{"version":3,"sources":["App.js","index.js"],"names":["axios","require","Forecast","props","removeCity","setState","city","chooseCity","e","inputValue","target","textContent","citiesListVisible","that","cityEncoded","encodeURIComponent","state","trim","get","then","response","forecastObj","Sunday","hours","icon","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","i","data","list","length","time","Date","dt","weather","temp","Number","main","getDay","getHours","forecastArr","key","Object","entries","hoursArr","hour","push","className","Math","round","alt","src","forecast","updateInputValue","value","fetch","method","headers","json","citiesList","map","index","onClick","name","country","onSubmit","preventDefault","this","onKeyDown","onChange","type","placeholder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cd42e9e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nconst axios = require(\"axios\");\nconst WeatherAPIKey = \"12975cb5d84452a454240c06140fbbc9\";\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      city: \"\",\n      citiesListVisible: false,\n      citiesList: [],\n      forecast: [],\n    };\n  }\n  removeCity = () => {\n    this.setState({\n      city: \"\",\n    });\n  };\n  chooseCity = (e) => {\n    this.setState(\n      {\n        inputValue: e.target.textContent,\n        city: e.target.textContent,\n        citiesListVisible: false,\n      },\n      () => {\n        let that = this;\n        let cityEncoded = encodeURIComponent(this.state.city.trim());\n        axios\n          .get(\n            \"https://api.openweathermap.org/data/2.5/forecast?q=\" +\n              cityEncoded +\n              \"&mode=json&appid=\" +\n              WeatherAPIKey\n          )\n          .then(function(response) {\n            let forecastObj = {\n              Sunday: {\n                hours: {},\n                icon: \"\",\n              },\n              Monday: {\n                hours: {},\n                icon: \"\",\n              },\n              Tuesday: {\n                hours: {},\n                icon: \"\",\n              },\n              Wednesday: {\n                hours: {},\n                icon: \"\",\n              },\n              Thursday: {\n                hours: {},\n                icon: \"\",\n              },\n              Friday: {\n                hours: {},\n                icon: \"\",\n              },\n              Saturday: {\n                hours: {},\n                icon: \"\",\n              },\n            };\n            for (let i = 0; i < response.data.list.length; i++) {\n              let time = new Date(response.data.list[i].dt * 1000);\n              let icon = response.data.list[i].weather[0].icon;\n              let temp = Number(response.data.list[i].main.temp) - 273.15;\n\n              switch (time.getDay()) {\n                case 0:\n                  forecastObj[\"Sunday\"][\"hours\"][time.getHours()] = {\n                    temp: temp,\n                  };\n                  forecastObj[\"Sunday\"][\"icon\"] = icon;\n                  break;\n                case 1:\n                  forecastObj[\"Monday\"][\"hours\"][time.getHours()] = {\n                    temp: temp,\n                  };\n                  forecastObj[\"Monday\"][\"icon\"] = icon;\n                  break;\n                case 2:\n                  forecastObj[\"Tuesday\"][\"hours\"][time.getHours()] = {\n                    temp: temp,\n                  };\n                  forecastObj[\"Tuesday\"][\"icon\"] = icon;\n                  break;\n                case 3:\n                  forecastObj[\"Wednesday\"][\"hours\"][time.getHours()] = {\n                    temp: temp,\n                  };\n                  forecastObj[\"Wednesday\"][\"icon\"] = icon;\n                  break;\n                case 4:\n                  forecastObj[\"Thursday\"][\"hours\"][time.getHours()] = {\n                    temp: temp,\n                  };\n                  forecastObj[\"Thursday\"][\"icon\"] = icon;\n                  break;\n                case 5:\n                  forecastObj[\"Friday\"][\"hours\"][time.getHours()] = {\n                    temp: temp,\n                  };\n                  forecastObj[\"Friday\"][\"icon\"] = icon;\n                  break;\n                case 6:\n                  forecastObj[\"Saturday\"][\"hours\"][time.getHours()] = {\n                    temp: temp,\n                  };\n                  forecastObj[\"Saturday\"][\"icon\"] = icon;\n                  break;\n                default:\n                  break;\n              }\n            }\n            let forecastArr = [];\n            for (let key in forecastObj) {\n              if (Object.entries(forecastObj[key][\"hours\"]).length === 0) {\n                continue;\n              }\n              let hoursArr = [];\n              for (let hour in forecastObj[key][\"hours\"]) {\n                hoursArr.push(\n                  <div key={hour} className=\"forecast-card__entry\">\n                    <span className=\"forecast-card__hour\">{hour}:00</span>\n                    <span className=\"forecast-card__temperature\">\n                      {Math.round(forecastObj[key][\"hours\"][hour][\"temp\"])}\n                      Â°C\n                    </span>\n                  </div>\n                );\n              }\n              forecastArr.push(\n                <div key={key} className=\"forecast-card\">\n                  <p className=\"forecast-card__day\">{key}</p>\n                  <img\n                    className=\"forecast-card__image\"\n                    alt=\"\"\n                    src={\n                      \"https://openweathermap.org/img/w/\" +\n                      forecastObj[key][\"icon\"] +\n                      \".png\"\n                    }\n                  />\n                  <div className=\"forecast-card__entries\">{hoursArr}</div>\n                </div>\n              );\n            }\n            that.setState({\n              forecast: forecastArr,\n            });\n          });\n      }\n    );\n  };\n  updateInputValue = (e) => {\n    this.setState(\n      {\n        inputValue: e.target.value,\n      },\n      () => {\n        if (this.state.inputValue.length > 3) {\n          let that = this;\n          fetch(\n            \"https://wft-geo-db.p.rapidapi.com/v1/geo/cities?namePrefix=\" +\n              this.state.inputValue,\n            {\n              method: \"GET\",\n              headers: {\n                \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n                \"x-rapidapi-key\":\n                  \"f202dd4a8amshb8b0d1941d03711p164c3ejsn9de325b5ae5d\",\n              },\n            }\n          )\n            .then((response) => {\n              return response.json();\n            })\n            .then(function(response) {\n              if (response.data.length > 0) {\n                that.setState({\n                  citiesList: response.data.map((city, index) => (\n                    <li\n                      key={index}\n                      onClick={that.chooseCity}\n                      className=\"weather-app-cities-list__item\"\n                    >\n                      {city.name + \", \" + city.country}\n                    </li>\n                  )),\n                  citiesListVisible: true,\n                });\n              }\n            });\n        } else {\n          this.setState({\n            citiesListVisible: false,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n        className=\"weather-app\"\n      >\n        <header className=\"weather-app__header\">\n          <h1 className=\"weather-app__title\">Weather forecast for</h1>\n          <input\n            value={this.state.city || this.state.inputValue}\n            onKeyDown={(e) => {\n              if (e.key === \"Backspace\") {\n                this.removeCity();\n              }\n            }}\n            onChange={(e) => this.updateInputValue(e, e.key)}\n            className=\"weather-app__input\"\n            type=\"text\"\n            placeholder=\"enter city name\"\n          />\n          <ul\n            className={\n              \"weather-app__cities-list weather-app-cities-list \" +\n              (this.state.citiesListVisible ? \"active\" : \"\")\n            }\n          >\n            {this.state.citiesList}\n          </ul>\n        </header>\n        <div className=\"forecast-cards\">{this.state.forecast}</div>\n      </form>\n    );\n  }\n}\n\nexport default Forecast;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Forecast from \"./App\";\n\nReactDOM.render(<Forecast />, document.getElementById(\"root\"));\n"],"sourceRoot":""}