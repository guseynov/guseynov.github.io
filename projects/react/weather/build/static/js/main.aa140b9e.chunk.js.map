{"version":3,"sources":["App.js","index.js"],"names":["axios","require","cachedScripts","Forecast","src","useState","loaded","error","state","setState","useEffect","includes","push","script","document","createElement","async","onScriptLoad","onScriptError","index","indexOf","splice","remove","addEventListener","body","appendChild","removeEventListener","useScript","inputValue","setInputValue","city","setCity","citiesListVisible","setCitiesListVisible","citiesList","setCitiesList","forecast","setForecast","chooseCity","e","target","textContent","cityEncoded","encodeURIComponent","get","then","response","forecastObj","Sunday","hours","icon","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","i","data","list","length","time","Date","dt","weather","temp","Number","main","getDay","getHours","forecastArr","key","Object","entries","hoursArr","hour","className","Math","round","alt","onSubmit","preventDefault","value","onKeyDown","onChange","window","google","maps","places","AutocompleteService","getQueryPredictions","input","map","onClick","description","updateInputValue","type","placeholder","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.aa140b9e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nconst axios = require(\"axios\");\nconst WeatherAPIKey = \"12975cb5d84452a454240c06140fbbc9\";\n\nlet cachedScripts = [];\n\nfunction useScript(src) {\n  // Keeping track of script loaded and error state\n\n  const [state, setState] = useState({\n    loaded: false,\n    error: false,\n  });\n\n  useEffect(\n    () => {\n      // If cachedScripts array already includes src that means another instance ...\n      // ... of this hook already loaded this script, so no need to load again.\n      if (cachedScripts.includes(src)) {\n        setState({\n          loaded: true,\n\n          error: false,\n        });\n      } else {\n        cachedScripts.push(src);\n        // Create script\n        let script = document.createElement(\"script\");\n        script.src = src;\n        script.async = true;\n        // Script event listener callbacks for load and error\n        const onScriptLoad = () => {\n          setState({\n            loaded: true,\n            error: false,\n          });\n        };\n\n        const onScriptError = () => {\n          // Remove from cachedScripts we can try loading again\n          const index = cachedScripts.indexOf(src);\n          if (index >= 0) cachedScripts.splice(index, 1);\n          script.remove();\n          setState({\n            loaded: true,\n            error: true,\n          });\n        };\n        script.addEventListener(\"load\", onScriptLoad);\n        script.addEventListener(\"error\", onScriptError);\n        // Add script to document body\n        document.body.appendChild(script);\n        // Remove event listeners on cleanup\n        return () => {\n          script.removeEventListener(\"load\", onScriptLoad);\n          script.removeEventListener(\"error\", onScriptError);\n        };\n      }\n    },\n    [src] // Only re-run effect if script src changes\n  );\n  return [state.loaded, state.error];\n}\n\nexport const Forecast = () => {\n  const [loaded, error] = useScript(\n    \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD6LXWmuCKyJpkTSxleL7oTRIh1qpFdXWA&libraries=places\"\n  );\n  const [inputValue, setInputValue] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [citiesListVisible, setCitiesListVisible] = useState(false);\n  const [citiesList, setCitiesList] = useState([]);\n  const [forecast, setForecast] = useState([]);\n\n  const chooseCity = (e) => {\n    setInputValue(e.target.textContent);\n    setCity(e.target.textContent);\n    setCitiesListVisible(false);\n    let cityEncoded = encodeURIComponent(e.target.textContent);\n    axios\n      .get(\n        \"https://api.openweathermap.org/data/2.5/forecast?q=\" +\n          cityEncoded +\n          \"&mode=json&appid=\" +\n          WeatherAPIKey\n      )\n      .then(function(response) {\n        let forecastObj = {\n          Sunday: {\n            hours: {},\n            icon: \"\",\n          },\n          Monday: {\n            hours: {},\n            icon: \"\",\n          },\n          Tuesday: {\n            hours: {},\n            icon: \"\",\n          },\n          Wednesday: {\n            hours: {},\n            icon: \"\",\n          },\n          Thursday: {\n            hours: {},\n            icon: \"\",\n          },\n          Friday: {\n            hours: {},\n            icon: \"\",\n          },\n          Saturday: {\n            hours: {},\n            icon: \"\",\n          },\n        };\n        for (let i = 0; i < response.data.list.length; i++) {\n          let time = new Date(response.data.list[i].dt * 1000);\n          let icon = response.data.list[i].weather[0].icon;\n          let temp = Number(response.data.list[i].main.temp) - 273.15;\n\n          switch (time.getDay()) {\n            case 0:\n              forecastObj[\"Sunday\"][\"hours\"][time.getHours()] = {\n                temp: temp,\n              };\n              forecastObj[\"Sunday\"][\"icon\"] = icon;\n              break;\n            case 1:\n              forecastObj[\"Monday\"][\"hours\"][time.getHours()] = {\n                temp: temp,\n              };\n              forecastObj[\"Monday\"][\"icon\"] = icon;\n              break;\n            case 2:\n              forecastObj[\"Tuesday\"][\"hours\"][time.getHours()] = {\n                temp: temp,\n              };\n              forecastObj[\"Tuesday\"][\"icon\"] = icon;\n              break;\n            case 3:\n              forecastObj[\"Wednesday\"][\"hours\"][time.getHours()] = {\n                temp: temp,\n              };\n              forecastObj[\"Wednesday\"][\"icon\"] = icon;\n              break;\n            case 4:\n              forecastObj[\"Thursday\"][\"hours\"][time.getHours()] = {\n                temp: temp,\n              };\n              forecastObj[\"Thursday\"][\"icon\"] = icon;\n              break;\n            case 5:\n              forecastObj[\"Friday\"][\"hours\"][time.getHours()] = {\n                temp: temp,\n              };\n              forecastObj[\"Friday\"][\"icon\"] = icon;\n              break;\n            case 6:\n              forecastObj[\"Saturday\"][\"hours\"][time.getHours()] = {\n                temp: temp,\n              };\n              forecastObj[\"Saturday\"][\"icon\"] = icon;\n              break;\n            default:\n              break;\n          }\n        }\n        let forecastArr = [];\n        for (let key in forecastObj) {\n          if (Object.entries(forecastObj[key][\"hours\"]).length === 0) {\n            continue;\n          }\n          let hoursArr = [];\n          for (let hour in forecastObj[key][\"hours\"]) {\n            hoursArr.push(\n              <div key={hour} className=\"forecast-card__entry\">\n                <span className=\"forecast-card__hour\">{hour}:00</span>\n                <span className=\"forecast-card__temperature\">\n                  {Math.round(forecastObj[key][\"hours\"][hour][\"temp\"])}\n                  °C\n                </span>\n              </div>\n            );\n          }\n          forecastArr.push(\n            <div key={key} className=\"forecast-card\">\n              <p className=\"forecast-card__day\">{key}</p>\n              <img\n                className=\"forecast-card__image\"\n                alt=\"\"\n                src={\n                  \"https://openweathermap.org/img/w/\" +\n                  forecastObj[key][\"icon\"] +\n                  \".png\"\n                }\n              />\n              <div className=\"forecast-card__entries\">{hoursArr}</div>\n            </div>\n          );\n        }\n        setForecast(forecastArr);\n      });\n  };\n\n  const updateInputValue = (e) => {\n    setInputValue(e.target.value);\n    if (inputValue.length > 3) {\n      if (loaded) {\n        const options = {\n          types: [\"(cities)\"],\n          input: inputValue,\n        };\n\n        const service = new window.google.maps.places.AutocompleteService();\n        service.getQueryPredictions({ input: inputValue }, (response) => {\n          if (response && response.length > 0) {\n            setCitiesList(\n              response.map((city, index) => (\n                <li\n                  key={index}\n                  onClick={chooseCity}\n                  className=\"weather-app-cities-list__item\"\n                >\n                  {city.description}\n                </li>\n              ))\n            );\n            setCitiesListVisible(true);\n          } else {\n            setCitiesListVisible(false);\n          }\n        });\n      }\n    }\n  };\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n      className=\"weather-app\"\n    >\n      <header className=\"weather-app__header\">\n        <h1 className=\"weather-app__title\">Weather forecast for</h1>\n        <input\n          value={city || inputValue}\n          onKeyDown={(e) => {\n            if (e.key === \"Backspace\") {\n              setCity(\"\");\n            }\n          }}\n          onChange={(e) => updateInputValue(e)}\n          className=\"weather-app__input\"\n          type=\"text\"\n          placeholder=\"enter city name\"\n        />\n        <ul\n          className={\n            \"weather-app__cities-list weather-app-cities-list \" +\n            (citiesListVisible ? \"active\" : \"\")\n          }\n        >\n          {citiesList}\n        </ul>\n      </header>\n      <div className=\"forecast-cards\">{forecast}</div>\n    </form>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Forecast } from \"./App\";\n\nReactDOM.render(<Forecast />, document.getElementById(\"root\"));\n"],"sourceRoot":""}