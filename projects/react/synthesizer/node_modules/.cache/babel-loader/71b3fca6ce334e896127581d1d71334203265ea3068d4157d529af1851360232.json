{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport var createTestAudioWorkletProcessorPostMessageSupport = function createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var blob, offlineAudioContext, url, isEmittingMessageEvents, isEmittingProcessorErrorEvents, audioWorkletNode, oscillator;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(nativeAudioWorkletNodeConstructor === null)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", true);\n          case 2:\n            if (!(nativeOfflineAudioContextConstructor === null)) {\n              _context.next = 4;\n              break;\n            }\n            return _context.abrupt(\"return\", false);\n          case 4:\n            blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n              type: 'application/javascript; charset=utf-8'\n            }); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n            offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n            url = URL.createObjectURL(blob);\n            isEmittingMessageEvents = false;\n            isEmittingProcessorErrorEvents = false;\n            _context.prev = 9;\n            _context.next = 12;\n            return offlineAudioContext.audioWorklet.addModule(url);\n          case 12:\n            audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n              numberOfOutputs: 0\n            });\n            oscillator = offlineAudioContext.createOscillator();\n            audioWorkletNode.port.onmessage = function () {\n              return isEmittingMessageEvents = true;\n            };\n            audioWorkletNode.onprocessorerror = function () {\n              return isEmittingProcessorErrorEvents = true;\n            };\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            _context.next = 20;\n            return offlineAudioContext.startRendering();\n          case 20:\n            _context.next = 24;\n            break;\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](9);\n          case 24:\n            _context.prev = 24;\n            URL.revokeObjectURL(url);\n            return _context.finish(24);\n          case 27:\n            return _context.abrupt(\"return\", isEmittingMessageEvents && !isEmittingProcessorErrorEvents);\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 22, 24, 27]]);\n  }));\n};","map":{"version":3,"mappings":";;AAEA;AACA,OAAO,IAAMA,iDAAiD,GAAwD,SAAzGA,iDAAiD,CAC1DC,iCAAiC,EACjCC,oCAAoC,EACpC;EACA,+EAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAECD,iCAAiC,KAAK,IAAI;cAAA;cAAA;YAAA;YAAA,iCACnC,IAAI;UAAA;YAAA,MAGXC,oCAAoC,KAAK,IAAI;cAAA;cAAA;YAAA;YAAA,iCACtC,KAAK;UAAA;YAGVC,IAAI,GAAG,IAAIC,IAAI,CACjB,CAAC,sHAAsH,CAAC,EACxH;cACIC,IAAI,EAAE;aACT,CACJ,EACD;YACMC,mBAAmB,GAAG,IAAIJ,oCAAoC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;YAC7EK,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;YAEjCO,uBAAuB,GAAG,KAAK;YAC/BC,8BAA8B,GAAG,KAAK;YAAA;YAAA;YAAA,OAGhCL,mBAAmB,CAACM,YAAY,CAACC,SAAS,CAACN,GAAG,CAAC;UAAA;YAE/CO,gBAAgB,GAAG,IAAIb,iCAAiC,CAACK,mBAAmB,EAAE,GAAG,EAAE;cAAES,eAAe,EAAE;YAAC,CAAE,CAAC;YAC1GC,UAAU,GAAGV,mBAAmB,CAACW,gBAAgB,EAAE;YAEzDH,gBAAgB,CAACI,IAAI,CAACC,SAAS,GAAG;cAAA,OAAOT,uBAAuB,GAAG,IAAI;YAAA,CAAC;YACxEI,gBAAgB,CAACM,gBAAgB,GAAG;cAAA,OAAOT,8BAA8B,GAAG,IAAI;YAAA,CAAC;YAEjFK,UAAU,CAACK,OAAO,CAACP,gBAAgB,CAAC;YACpCE,UAAU,CAACM,KAAK,CAAC,CAAC,CAAC;YAAC;YAAA,OAEdhB,mBAAmB,CAACiB,cAAc,EAAE;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAI1Cf,GAAG,CAACgB,eAAe,CAACjB,GAAG,CAAC;YAAC;UAAA;YAAA,iCAGtBG,uBAAuB,IAAI,CAACC,8BAA8B;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACpE;AACL,CAAC","names":["createTestAudioWorkletProcessorPostMessageSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","offlineAudioContext","url","URL","createObjectURL","isEmittingMessageEvents","isEmittingProcessorErrorEvents","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","port","onmessage","onprocessorerror","connect","start","startRendering","revokeObjectURL"],"sources":["/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/standardized-audio-context/src/factories/test-audio-worklet-processor-post-message-support.ts"],"sourcesContent":["import { TTestAudioWorkletProcessorPostMessageSupportFactory } from '../types';\n\n// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport: TTestAudioWorkletProcessorPostMessageSupportFactory = (\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor\n) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const blob = new Blob(\n            ['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'],\n            {\n                type: 'application/javascript; charset=utf-8'\n            }\n        );\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n\n            await offlineAudioContext.startRendering();\n        } catch {\n            // Ignore errors.\n        } finally {\n            URL.revokeObjectURL(url);\n        }\n\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}