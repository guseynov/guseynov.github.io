{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDynamicsCompressorNodeRendererFactory = function createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeDynamicsCompressorNodes = new WeakMap();\n    var createDynamicsCompressorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeDynamicsCompressorNode, nativeDynamicsCompressorNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n                 * created again.\n                 */\n                nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n                if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                  options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                  };\n                  nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n                }\n                renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n                if (nativeDynamicsCompressorNodeIsOwnedByContext) {\n                  _context.next = 17;\n                  break;\n                }\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n              case 7:\n                _context.next = 9;\n                return renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n              case 9:\n                _context.next = 11;\n                return renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n              case 11:\n                _context.next = 13;\n                return renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n              case 13:\n                _context.next = 15;\n                return renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n              case 15:\n                _context.next = 27;\n                break;\n              case 17:\n                _context.next = 19;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n              case 19:\n                _context.next = 21;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n              case 21:\n                _context.next = 23;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n              case 23:\n                _context.next = 25;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n              case 25:\n                _context.next = 27;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n              case 27:\n                _context.next = 29;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n              case 29:\n                return _context.abrupt(\"return\", nativeDynamicsCompressorNode);\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function createDynamicsCompressorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"sources":["/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/standardized-audio-context/src/factories/dynamics-compressor-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDynamicsCompressorNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDynamicsCompressorNodeRendererFactoryFactory, TNativeDynamicsCompressorNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDynamicsCompressorNodeRendererFactory: TDynamicsCompressorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDynamicsCompressorNode>();\n\n        const createDynamicsCompressorNode = async (\n            proxy: IDynamicsCompressorNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode<T, TNativeDynamicsCompressorNode>(proxy);\n\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            return nativeDynamicsCompressorNode;\n        };\n\n        return {\n            render(\n                proxy: IDynamicsCompressorNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeDynamicsCompressorNode> {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}