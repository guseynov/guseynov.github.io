{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createChannelMergerNodeRendererFactory = function createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAudioNode, nativeAudioNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n                if (!nativeAudioNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                  };\n                  nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n                }\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n                _context.next = 6;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n              case 6:\n                return _context.abrupt(\"return\", nativeAudioNode);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,sCAAsC,GAA6C,SAAnFA,sCAAsC,CAC/CC,6BAA6B,EAC7BC,kBAAkB,EAClBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,wBAAwB,GAAG,IAAIC,OAAO,EAAgD;IAE5F,IAAMC,eAAe;MAAA,sEAAG,iBAAOC,KAAoB,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cAAA;gBAClGC,eAAe,GAAGP,kBAAkB,CAAsBK,KAAK,CAAC,EAEpE;gBACMG,+BAA+B,GAAGX,gBAAgB,CAACU,eAAe,EAAED,yBAAyB,CAAC;gBAEpG,IAAI,CAACE,+BAA+B,EAAE;kBAC5BC,OAAO,GAAG;oBACZC,YAAY,EAAEH,eAAe,CAACG,YAAY;oBAC1CC,gBAAgB,EAAEJ,eAAe,CAACI,gBAAgB;oBAClDC,qBAAqB,EAAEL,eAAe,CAACK,qBAAqB;oBAC5DC,cAAc,EAAEN,eAAe,CAACM;mBACnC;kBAEDN,eAAe,GAAGR,6BAA6B,CAACO,yBAAyB,EAAEG,OAAO,CAAC;;gBAGvFP,wBAAwB,CAACY,GAAG,CAACR,yBAAyB,EAAEC,eAAe,CAAC;gBAAC;gBAAA,OAEnEN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,eAAe,CAAC;cAAA;gBAAA,iCAEzEA,eAAe;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzB;MAAA,gBAtBKH,eAAe;QAAA;MAAA;IAAA,GAsBpB;IAED,OAAO;MACHW,MAAM,kBAACV,KAAoB,EAAEC,yBAAqD;QAC9E,IAAMU,uBAAuB,GAAGd,wBAAwB,CAACe,GAAG,CAACX,yBAAyB,CAAC;QAEvF,IAAIU,uBAAuB,KAAKE,SAAS,EAAE;UACvC,OAAOC,OAAO,CAACC,OAAO,CAACJ,uBAAuB,CAAC;;QAGnD,OAAOZ,eAAe,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC5D;KACH;EACL,CAAC;AACL,CAAC","names":["isOwnedByContext","createChannelMergerNodeRendererFactory","createNativeChannelMergerNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfInputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"sources":["/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/standardized-audio-context/src/factories/channel-merger-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TChannelMergerNodeRendererFactoryFactory, TNativeAudioNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createChannelMergerNodeRendererFactory: TChannelMergerNodeRendererFactoryFactory = (\n    createNativeChannelMergerNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioNode>();\n\n        const createAudioNode = async (proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode<T, TNativeAudioNode>(proxy);\n\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n            return nativeAudioNode;\n        };\n\n        return {\n            render(proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAudioNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}