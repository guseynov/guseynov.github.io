{"ast":null,"code":"import _toConsumableArray from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var createRenderInputsOfAudioNode = function createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(audioNode, nativeOfflineAudioContext, nativeAudioNode) {\n      var audioNodeConnections;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              audioNodeConnections = getAudioNodeConnections(audioNode);\n              _context2.next = 3;\n              return Promise.all(audioNodeConnections.activeInputs.map(function (connections, input) {\n                return Array.from(connections).map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n                    var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode, destination;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                            audioNodeRenderer = getAudioNodeRenderer(source);\n                            _context.next = 4;\n                            return audioNodeRenderer.render(source, nativeOfflineAudioContext);\n                          case 4:\n                            renderedNativeAudioNode = _context.sent;\n                            destination = audioNode.context.destination;\n                            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                              renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n                            }\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n                  return function (_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              }).reduce(function (allRenderingPromises, renderingPromises) {\n                return [].concat(_toConsumableArray(allRenderingPromises), _toConsumableArray(renderingPromises));\n              }, []));\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"mappings":";;;;AAGA,OAAO,IAAMA,6BAA6B,GAAoC,SAAjEA,6BAA6B,CACtCC,uBAAuB,EACvBC,oBAAoB,EACpBC,cAAc,EACd;EACA;IAAA,sEAAO,kBAAOC,SAAS,EAAEC,yBAAyB,EAAEC,eAAe;MAAA;MAAA;QAAA;UAAA;YAAA;cACzDC,oBAAoB,GAAGN,uBAAuB,CAACG,SAAS,CAAC;cAAA;cAAA,OAEzDI,OAAO,CAACC,GAAG,CACbF,oBAAoB,CAACG,YAAY,CAC5BC,GAAG,CAAC,UAACC,WAAW,EAAEC,KAAK;gBAAA,OACpBC,KAAK,CAACC,IAAI,CAACH,WAAW,CAAC,CAACD,GAAG;kBAAA,uEAAC;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAA,kCAAQK,MAAM,aAAEC,MAAM;4BACxCC,iBAAiB,GAAGhB,oBAAoB,CAACc,MAAM,CAAC;4BAAA;4BAAA,OAChBE,iBAAiB,CAACC,MAAM,CAACH,MAAM,EAAEX,yBAAyB,CAAC;0BAAA;4BAA3Fe,uBAAuB;4BACvBC,WAAW,GAAoDjB,SAAS,CAACkB,OAAO,CAACD,WAAW;4BAElG,IAAI,CAAClB,cAAc,CAACa,MAAM,CAAC,KAAKZ,SAAS,KAAKiB,WAAW,IAAI,CAAClB,cAAc,CAACC,SAAS,CAAC,CAAC,EAAE;8BACtFgB,uBAAuB,CAACG,OAAO,CAACjB,eAAe,EAAEW,MAAM,EAAEJ,KAAK,CAAC;;0BAClE;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CACJ;kBAAA;oBAAA;kBAAA;gBAAA,IAAC;cAAA,EACL,CACAW,MAAM,CAAC,UAACC,oBAAoB,EAAEC,iBAAiB;gBAAA,oCAASD,oBAAoB,sBAAKC,iBAAiB;cAAA,CAAC,EAAE,EAAE,CAAC,CAChH;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACJ;IAAA;MAAA;IAAA;EAAA;AACL,CAAC","names":["createRenderInputsOfAudioNode","getAudioNodeConnections","getAudioNodeRenderer","isPartOfACycle","audioNode","nativeOfflineAudioContext","nativeAudioNode","audioNodeConnections","Promise","all","activeInputs","map","connections","input","Array","from","source","output","audioNodeRenderer","render","renderedNativeAudioNode","destination","context","connect","reduce","allRenderingPromises","renderingPromises"],"sources":["/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/standardized-audio-context/src/factories/render-inputs-of-audio-node.ts"],"sourcesContent":["import { IAudioDestinationNode } from '../interfaces';\nimport { TRenderInputsOfAudioNodeFactory } from '../types';\n\nexport const createRenderInputsOfAudioNode: TRenderInputsOfAudioNodeFactory = (\n    getAudioNodeConnections,\n    getAudioNodeRenderer,\n    isPartOfACycle\n) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n\n        await Promise.all(\n            audioNodeConnections.activeInputs\n                .map((connections, input) =>\n                    Array.from(connections).map(async ([source, output]) => {\n                        const audioNodeRenderer = getAudioNodeRenderer(source);\n                        const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n                        const destination = <IAudioDestinationNode<typeof audioNode.context>>audioNode.context.destination;\n\n                        if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                            renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n                        }\n                    })\n                )\n                .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], [])\n        );\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}