{"ast":null,"code":"import _slicedToArray from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nvar processBuffer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) {\n    var length, numberOfInputChannels, numberOfOutputChannels, processedBuffer, audioNodeConnections, audioWorkletProcessor, inputs, outputs, parameters, _loop, i, _ret;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Ceil the length to the next full render quantum.\n            // Bug #17: Safari does not yet expose the length.\n            length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n            numberOfInputChannels = options.channelCount * options.numberOfInputs;\n            numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n              return sum + value;\n            }, 0);\n            processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n            if (!(processorConstructor === undefined)) {\n              _context.next = 6;\n              break;\n            }\n            throw new Error('Missing the processor constructor.');\n          case 6:\n            audioNodeConnections = getAudioNodeConnections(proxy);\n            _context.next = 9;\n            return getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n          case 9:\n            audioWorkletProcessor = _context.sent;\n            inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n            outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n            parameters = Array.from(proxy.parameters.keys()).reduce(function (prmtrs, name) {\n              return _objectSpread(_objectSpread({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n            }, {});\n            _loop = function _loop(i) {\n              if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n                for (var j = 0; j < options.numberOfInputs; j += 1) {\n                  for (var k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                  }\n                }\n              }\n              if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n                processorConstructor.parameterDescriptors.forEach(function (_ref2, index) {\n                  var name = _ref2.name;\n                  copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n                });\n              }\n              for (var _j = 0; _j < options.numberOfInputs; _j += 1) {\n                for (var _k = 0; _k < outputChannelCount[_j]; _k += 1) {\n                  // The byteLength will be 0 when the ArrayBuffer was transferred.\n                  if (outputs[_j][_k].byteLength === 0) {\n                    outputs[_j][_k] = new Float32Array(128);\n                  }\n                }\n              }\n              try {\n                var potentiallyEmptyInputs = inputs.map(function (input, index) {\n                  if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                  }\n                  return input;\n                });\n                var activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, function () {\n                  return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n                });\n                if (processedBuffer !== null) {\n                  for (var _j2 = 0, outputChannelSplitterNodeOutput = 0; _j2 < options.numberOfOutputs; _j2 += 1) {\n                    for (var _k2 = 0; _k2 < outputChannelCount[_j2]; _k2 += 1) {\n                      copyToChannel(processedBuffer, outputs[_j2], _k2, outputChannelSplitterNodeOutput + _k2, i);\n                    }\n                    outputChannelSplitterNodeOutput += outputChannelCount[_j2];\n                  }\n                }\n                if (!activeSourceFlag) {\n                  return \"break\";\n                }\n              } catch (error) {\n                proxy.dispatchEvent(new ErrorEvent('processorerror', {\n                  colno: error.colno,\n                  filename: error.filename,\n                  lineno: error.lineno,\n                  message: error.message\n                }));\n                return \"break\";\n              }\n            };\n            i = 0;\n          case 15:\n            if (!(i < length)) {\n              _context.next = 22;\n              break;\n            }\n            _ret = _loop(i);\n            if (!(_ret === \"break\")) {\n              _context.next = 19;\n              break;\n            }\n            return _context.abrupt(\"break\", 22);\n          case 19:\n            i += 128;\n            _context.next = 15;\n            break;\n          case 22:\n            return _context.abrupt(\"return\", processedBuffer);\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function processBuffer(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createAudioWorkletNodeRendererFactory = function createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function (name, options, processorConstructor) {\n    var renderedNativeAudioNodes = new WeakMap();\n    var processedBufferPromise = null;\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(proxy, nativeOfflineAudioContext) {\n        var nativeAudioWorkletNode, nativeOutputNodes, nativeAudioWorkletNodeIsOwnedByContext, outputChannelCount, numberOfOutputChannels, outputChannelSplitterNode, outputChannelMergerNodes, i, outputGainNode, _numberOfInputChannels, numberOfParameters, numberOfChannels, renderBuffer, _processedBuffer, audioBufferSourceNode, _nativeOutputNodes, _nativeOutputNodes2, _outputChannelSplitterNode, _outputChannelMergerNodes, _outputGainNode, _i3, outputChannelSplitterNodeOutput, outputChannelMergerNode, j, _iterator2, _step2, _step2$value, nm, audioParam, _iterator3, _step3, _step3$value, _nm, _audioParam;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                nativeAudioWorkletNode = getNativeAudioNode(proxy);\n                nativeOutputNodes = null;\n                nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n                outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n                if (nativeAudioWorkletNodeConstructor === null) {\n                  numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n                    return sum + value;\n                  }, 0);\n                  outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                  });\n                  outputChannelMergerNodes = [];\n                  for (i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                      channelCount: 1,\n                      channelCountMode: 'explicit',\n                      channelInterpretation: 'speakers',\n                      numberOfInputs: outputChannelCount[i]\n                    }));\n                  }\n                  outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                  });\n                  outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                  outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                  nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n                } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                  nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n                }\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n                if (!(nativeOutputNodes !== null)) {\n                  _context4.next = 41;\n                  break;\n                }\n                if (!(processedBufferPromise === null)) {\n                  _context4.next = 32;\n                  break;\n                }\n                if (!(processorConstructor === undefined)) {\n                  _context4.next = 10;\n                  break;\n                }\n                throw new Error('Missing the processor constructor.');\n              case 10:\n                if (!(nativeOfflineAudioContextConstructor === null)) {\n                  _context4.next = 12;\n                  break;\n                }\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n              case 12:\n                // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                _numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                numberOfChannels = _numberOfInputChannels + numberOfParameters;\n                renderBuffer = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                    var partialOfflineAudioContext, gainNodes, inputChannelSplitterNodes, _i, constantSourceNodes, inputChannelMergerNode, _i2, j, _iterator, _step, _step$value, index, constantSourceNode;\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels,\n                            // Ceil the length to the next full render quantum.\n                            // Bug #17: Safari does not yet expose the length.\n                            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                            gainNodes = [];\n                            inputChannelSplitterNodes = [];\n                            for (_i = 0; _i < options.numberOfInputs; _i += 1) {\n                              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: options.channelCountMode,\n                                channelInterpretation: options.channelInterpretation,\n                                gain: 1\n                              }));\n                              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                numberOfOutputs: options.channelCount\n                              }));\n                            }\n                            _context3.next = 6;\n                            return Promise.all(Array.from(proxy.parameters.values()).map( /*#__PURE__*/function () {\n                              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(audioParam) {\n                                var constantSourceNode;\n                                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                          channelCount: 1,\n                                          channelCountMode: 'explicit',\n                                          channelInterpretation: 'discrete',\n                                          offset: audioParam.value\n                                        });\n                                        _context2.next = 3;\n                                        return renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n                                      case 3:\n                                        return _context2.abrupt(\"return\", constantSourceNode);\n                                      case 4:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2);\n                              }));\n                              return function (_x10) {\n                                return _ref5.apply(this, arguments);\n                              };\n                            }()));\n                          case 6:\n                            constantSourceNodes = _context3.sent;\n                            inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                              channelCount: 1,\n                              channelCountMode: 'explicit',\n                              channelInterpretation: 'speakers',\n                              numberOfInputs: Math.max(1, _numberOfInputChannels + numberOfParameters)\n                            });\n                            for (_i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n                              gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n                              for (j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n                              }\n                            }\n                            _iterator = _createForOfIteratorHelper(constantSourceNodes.entries());\n                            try {\n                              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                                _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], constantSourceNode = _step$value[1];\n                                constantSourceNode.connect(inputChannelMergerNode, 0, _numberOfInputChannels + index);\n                                constantSourceNode.start(0);\n                              }\n                            } catch (err) {\n                              _iterator.e(err);\n                            } finally {\n                              _iterator.f();\n                            }\n                            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                            _context3.next = 14;\n                            return Promise.all(gainNodes.map(function (gainNode) {\n                              return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode);\n                            }));\n                          case 14:\n                            return _context3.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n                          case 15:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                  return function renderBuffer() {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n                _context4.t0 = processBuffer;\n                _context4.t1 = proxy;\n                if (!(numberOfChannels === 0)) {\n                  _context4.next = 22;\n                  break;\n                }\n                _context4.t2 = null;\n                _context4.next = 25;\n                break;\n              case 22:\n                _context4.next = 24;\n                return renderBuffer();\n              case 24:\n                _context4.t2 = _context4.sent;\n              case 25:\n                _context4.t3 = _context4.t2;\n                _context4.t4 = nativeOfflineAudioContext;\n                _context4.t5 = options;\n                _context4.t6 = outputChannelCount;\n                _context4.t7 = processorConstructor;\n                _context4.t8 = exposeCurrentFrameAndCurrentTime;\n                processedBufferPromise = (0, _context4.t0)(_context4.t1, _context4.t3, _context4.t4, _context4.t5, _context4.t6, _context4.t7, _context4.t8);\n              case 32:\n                _context4.next = 34;\n                return processedBufferPromise;\n              case 34:\n                _processedBuffer = _context4.sent;\n                audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                  buffer: null,\n                  channelCount: 2,\n                  channelCountMode: 'max',\n                  channelInterpretation: 'speakers',\n                  loop: false,\n                  loopEnd: 0,\n                  loopStart: 0,\n                  playbackRate: 1\n                });\n                _nativeOutputNodes = nativeOutputNodes, _nativeOutputNodes2 = _slicedToArray(_nativeOutputNodes, 3), _outputChannelSplitterNode = _nativeOutputNodes2[0], _outputChannelMergerNodes = _nativeOutputNodes2[1], _outputGainNode = _nativeOutputNodes2[2];\n                if (_processedBuffer !== null) {\n                  audioBufferSourceNode.buffer = _processedBuffer;\n                  audioBufferSourceNode.start(0);\n                }\n                audioBufferSourceNode.connect(_outputChannelSplitterNode);\n                for (_i3 = 0, outputChannelSplitterNodeOutput = 0; _i3 < proxy.numberOfOutputs; _i3 += 1) {\n                  outputChannelMergerNode = _outputChannelMergerNodes[_i3];\n                  for (j = 0; j < outputChannelCount[_i3]; j += 1) {\n                    _outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                  }\n                  outputChannelSplitterNodeOutput += outputChannelCount[_i3];\n                }\n                return _context4.abrupt(\"return\", _outputGainNode);\n              case 41:\n                if (nativeAudioWorkletNodeIsOwnedByContext) {\n                  _context4.next = 61;\n                  break;\n                }\n                _iterator2 = _createForOfIteratorHelper(proxy.parameters.entries());\n                _context4.prev = 43;\n                _iterator2.s();\n              case 45:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context4.next = 51;\n                  break;\n                }\n                _step2$value = _slicedToArray(_step2.value, 2), nm = _step2$value[0], audioParam = _step2$value[1];\n                _context4.next = 49;\n                return renderAutomation(nativeOfflineAudioContext, audioParam,\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                nativeAudioWorkletNode.parameters.get(nm));\n              case 49:\n                _context4.next = 45;\n                break;\n              case 51:\n                _context4.next = 56;\n                break;\n              case 53:\n                _context4.prev = 53;\n                _context4.t9 = _context4[\"catch\"](43);\n                _iterator2.e(_context4.t9);\n              case 56:\n                _context4.prev = 56;\n                _iterator2.f();\n                return _context4.finish(56);\n              case 59:\n                _context4.next = 78;\n                break;\n              case 61:\n                _iterator3 = _createForOfIteratorHelper(proxy.parameters.entries());\n                _context4.prev = 62;\n                _iterator3.s();\n              case 64:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context4.next = 70;\n                  break;\n                }\n                _step3$value = _slicedToArray(_step3.value, 2), _nm = _step3$value[0], _audioParam = _step3$value[1];\n                _context4.next = 68;\n                return connectAudioParam(nativeOfflineAudioContext, _audioParam,\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                nativeAudioWorkletNode.parameters.get(_nm));\n              case 68:\n                _context4.next = 64;\n                break;\n              case 70:\n                _context4.next = 75;\n                break;\n              case 72:\n                _context4.prev = 72;\n                _context4.t10 = _context4[\"catch\"](62);\n                _iterator3.e(_context4.t10);\n              case 75:\n                _context4.prev = 75;\n                _iterator3.f();\n                return _context4.finish(75);\n              case 78:\n                _context4.next = 80;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n              case 80:\n                return _context4.abrupt(\"return\", nativeAudioWorkletNode);\n              case 81:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[43, 53, 56, 59], [62, 72, 75, 78]]);\n      }));\n      return function createAudioNode(_x8, _x9) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n        var renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["copyFromChannel","copyToChannel","createNestedArrays","getAudioNodeConnections","getAudioWorkletProcessor","isOwnedByContext","processBuffer","proxy","renderedBuffer","nativeOfflineAudioContext","options","outputChannelCount","processorConstructor","exposeCurrentFrameAndCurrentTime","length","Math","ceil","context","numberOfInputChannels","channelCount","numberOfInputs","numberOfOutputChannels","reduce","sum","value","processedBuffer","createBuffer","sampleRate","undefined","Error","audioNodeConnections","audioWorkletProcessor","inputs","outputs","numberOfOutputs","parameters","Array","from","keys","prmtrs","name","Float32Array","i","j","k","parameterDescriptors","forEach","index","byteLength","potentiallyEmptyInputs","map","input","activeInputs","size","activeSourceFlag","process","outputChannelSplitterNodeOutput","error","dispatchEvent","ErrorEvent","colno","filename","lineno","message","createAudioWorkletNodeRendererFactory","connectAudioParam","connectMultipleOutputs","createNativeAudioBufferSourceNode","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeConstantSourceNode","createNativeGainNode","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","getNativeAudioNode","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","processedBufferPromise","createAudioNode","nativeAudioWorkletNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","isArray","outputChannelSplitterNode","max","channelCountMode","channelInterpretation","outputChannelMergerNodes","push","outputGainNode","gain","connect","bind","disconnect","set","numberOfParameters","numberOfChannels","renderBuffer","partialOfflineAudioContext","gainNodes","inputChannelSplitterNodes","Promise","all","values","audioParam","constantSourceNode","offset","constantSourceNodes","inputChannelMergerNode","entries","start","destination","gainNode","audioBufferSourceNode","buffer","loop","loopEnd","loopStart","playbackRate","outputChannelMergerNode","nm","get","render","renderedNativeAudioWorkletNodeOrGainNode","resolve"],"sources":["/Users/ahmed/Desktop/Portfolio.nosync/guseynov.github.io/projects/react/synthesizer/node_modules/standardized-audio-context/src/factories/audio-worklet-node-renderer-factory.ts"],"sourcesContent":["import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport {\n    IAudioWorkletNode,\n    IAudioWorkletNodeOptions,\n    IAudioWorkletProcessorConstructor,\n    IMinimalOfflineAudioContext,\n    IOfflineAudioContext,\n    IReadOnlyMap\n} from '../interfaces';\nimport {\n    TAudioWorkletNodeRendererFactoryFactory,\n    TExposeCurrentFrameAndCurrentTimeFunction,\n    TNativeAudioBuffer,\n    TNativeAudioNode,\n    TNativeAudioParam,\n    TNativeAudioWorkletNode,\n    TNativeChannelMergerNode,\n    TNativeChannelSplitterNode,\n    TNativeGainNode,\n    TNativeOfflineAudioContext\n} from '../types';\n\nconst processBuffer = async <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n    proxy: IAudioWorkletNode<T>,\n    renderedBuffer: null | TNativeAudioBuffer,\n    nativeOfflineAudioContext: TNativeOfflineAudioContext,\n    options: IAudioWorkletNodeOptions,\n    outputChannelCount: number[],\n    processorConstructor: undefined | IAudioWorkletProcessorConstructor,\n    exposeCurrentFrameAndCurrentTime: TExposeCurrentFrameAndCurrentTimeFunction\n): Promise<null | TNativeAudioBuffer> => {\n    // Ceil the length to the next full render quantum.\n    // Bug #17: Safari does not yet expose the length.\n    const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer =\n        numberOfOutputChannels === 0\n            ? null\n            : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    const parameters: { [name: string]: Float32Array } = Array.from(proxy.parameters.keys()).reduce(\n        (prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }),\n        {}\n    );\n\n    for (let i = 0; i < length; i += 128) {\n        if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n                for (let k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                }\n            }\n        }\n\n        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n\n        try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                }\n\n                return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(\n                i / nativeOfflineAudioContext.sampleRate,\n                nativeOfflineAudioContext.sampleRate,\n                () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters)\n            );\n\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[j];\n                }\n            }\n\n            if (!activeSourceFlag) {\n                break;\n            }\n        } catch (error) {\n            proxy.dispatchEvent(\n                new ErrorEvent('processorerror', {\n                    colno: error.colno,\n                    filename: error.filename,\n                    lineno: error.lineno,\n                    message: error.message\n                })\n            );\n\n            break;\n        }\n    }\n\n    return processedBuffer;\n};\n\nexport const createAudioWorkletNodeRendererFactory: TAudioWorkletNodeRendererFactoryFactory = (\n    connectAudioParam,\n    connectMultipleOutputs,\n    createNativeAudioBufferSourceNode,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    deleteUnrenderedAudioWorkletNode,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getNativeAudioNode,\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        name: string,\n        options: IAudioWorkletNodeOptions,\n        processorConstructor: undefined | IAudioWorkletProcessorConstructor\n    ) => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioWorkletNode | TNativeGainNode>();\n\n        let processedBufferPromise: null | Promise<null | TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IAudioWorkletNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode<T, TNativeAudioWorkletNode>(proxy);\n            let nativeOutputNodes: null | [TNativeChannelSplitterNode, TNativeChannelMergerNode[], TNativeGainNode] = null;\n\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            const outputChannelCount = Array.isArray(options.outputChannelCount)\n                ? options.outputChannelCount\n                : Array.from(options.outputChannelCount);\n\n            // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes: TNativeChannelMergerNode[] = [];\n\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(\n                        createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: outputChannelCount[i]\n                        })\n                    );\n                }\n\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n\n                outputGainNode.connect = <TNativeAudioNode['connect']>connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                outputGainNode.disconnect = <TNativeAudioNode['disconnect']>disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n\n            renderedNativeAudioNodes.set(\n                nativeOfflineAudioContext,\n                nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]\n            );\n\n            if (nativeOutputNodes !== null) {\n                if (processedBufferPromise === null) {\n                    if (processorConstructor === undefined) {\n                        throw new Error('Missing the processor constructor.');\n                    }\n\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                    const numberOfParameters =\n                        processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                    const numberOfChannels = numberOfInputChannels + numberOfParameters;\n\n                    const renderBuffer = async () => {\n                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                            numberOfChannels,\n                            // Ceil the length to the next full render quantum.\n                            // Bug #17: Safari does not yet expose the length.\n                            Math.ceil(proxy.context.length / 128) * 128,\n                            nativeOfflineAudioContext.sampleRate\n                        );\n                        const gainNodes: TNativeGainNode[] = [];\n                        const inputChannelSplitterNodes = [];\n\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes.push(\n                                createNativeGainNode(partialOfflineAudioContext, {\n                                    channelCount: options.channelCount,\n                                    channelCountMode: options.channelCountMode,\n                                    channelInterpretation: options.channelInterpretation,\n                                    gain: 1\n                                })\n                            );\n                            inputChannelSplitterNodes.push(\n                                createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                    channelCount: options.channelCount,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    numberOfOutputs: options.channelCount\n                                })\n                            );\n                        }\n\n                        const constantSourceNodes = await Promise.all(\n                            Array.from(proxy.parameters.values()).map(async (audioParam) => {\n                                const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                    channelCount: 1,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    offset: audioParam.value\n                                });\n\n                                await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n\n                                return constantSourceNode;\n                            })\n                        );\n\n                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                        });\n\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n                            for (let j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n                            }\n                        }\n\n                        for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                            constantSourceNode.start(0);\n                        }\n\n                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n                        await Promise.all(\n                            gainNodes.map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode))\n                        );\n\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    };\n\n                    processedBufferPromise = processBuffer(\n                        proxy,\n                        numberOfChannels === 0 ? null : await renderBuffer(),\n                        nativeOfflineAudioContext,\n                        options,\n                        outputChannelCount,\n                        processorConstructor,\n                        exposeCurrentFrameAndCurrentTime\n                    );\n                }\n\n                const processedBuffer = await processedBufferPromise;\n                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n\n                if (processedBuffer !== null) {\n                    audioBufferSourceNode.buffer = processedBuffer;\n                    audioBufferSourceNode.start(0);\n                }\n\n                audioBufferSourceNode.connect(outputChannelSplitterNode);\n\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n\n                return outputGainNode;\n            }\n\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(\n                        nativeOfflineAudioContext,\n                        audioParam,\n                        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                        <TNativeAudioParam>(<IReadOnlyMap<string, TNativeAudioParam>>nativeAudioWorkletNode.parameters).get(nm)\n                    );\n                }\n            } else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(\n                        nativeOfflineAudioContext,\n                        audioParam,\n                        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                        <TNativeAudioParam>(<IReadOnlyMap<string, TNativeAudioParam>>nativeAudioWorkletNode.parameters).get(nm)\n                    );\n                }\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n\n            return nativeAudioWorkletNode;\n        };\n\n        return {\n            render(\n                proxy: IAudioWorkletNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioWorkletNode | TNativeGainNode> {\n                deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n\n                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}